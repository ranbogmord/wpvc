"use strict";

const async = require('async');
const WPvulnDB = require('../lib/wpvulndb');
const semcmp = require('semver-compare');

const mod = {
    getChecksForSite: function (site) {
        const client = new WPvulnDB();
        return [function (callback) {
            client.checkWordpressVersion(site.coreVersion.replace(/\./g, '')).on('complete', function (result) {
                callback(null, {
                    type: 'wordpress',
                    result: result
                });
            });
        }].concat(site.plugins.map(function (plugin) {
            return function (callback) {
                client.checkPlugin(plugin.slug).on('complete', function (result) {
                    callback(null, {
                        type: 'plugin',
                        installedVersion: plugin.version,
                        slug: plugin.slug,
                        result: result
                    });
                });
            };
        }));
    },
    checkSite: function (site, callback) {
        const checks = mod.getChecksForSite(site);

        async.parallel(checks, function (err, results) {
            if (!err) {
                results.forEach(function (response) {
                    if (response instanceof Error) {
                        return false;
                    }

                    if (response.type == 'wordpress') {
                        if (response.result[site.coreVersion]) {
                            site.knownVulnerabilities.wordpress = response.result[site.coreVersion].vulnerabilities;
                        }

                    } else if (response.type == 'plugin') {
                        if (response.result[response.slug]) {
                            let vulns = response.result[response.slug].vulnerabilities;

                            let affectedVulns = [];
                            vulns.forEach(function (vuln) {
                                if (!vuln.fixed_in || semcmp(vuln.fixed_in, response.installedVersion) > 0) {
                                    affectedVulns.push(vuln);
                                }
                            });

                            site.knownVulnerabilities.plugins = affectedVulns;
                        }
                    }
                });
            }

            callback(null, site);
        });
    }
};

module.exports = mod;
